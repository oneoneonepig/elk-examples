input {
  pipeline { address => iiscustom }
}
filter {
  # Parse message
  grok {
    match => {
      message => "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:serverip} %{WORD:request.verb} %{NOTSPACE:request.url_stem} %{NOTSPACE:request.url_query} %{NUMBER:port:int} %{NOTSPACE:request.username} %{IPORHOST:client.ip} %{NOTSPACE:request.agent} %{NOTSPACE:response.referer} %{NUMBER:response.code:int} %{NUMBER:iis.sub_status:int} %{NUMBER:iis.win32_status:int} %{NUMBER:duration:int}"
    }
  }

  # Convert ip to geo-location
  geoip {
    source => "clientip"
    target => "geoip"
    fields => [
      "country_name",
      "city_name"
    ]
  }

  # Merge the url
  if [request.url_query] == "-" {
    mutate {
      add_field => { "request.url" => "%{request.url_stem}" }
    }
  } else {
    mutate {
      add_field => { "request.url" => "%{request.url_stem}?%{request.url_query}" }
    }
  }

  # Use http access time as @timestamp 
  mutate {
    copy => ["@timestamp","event.created"]
  }
  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
  }

  # Remove parsed or unused fields
  mutate {
    remove_field => [ "request.url_query", "request.url_stem", "message" ]
  }
}
output {
  elasticsearch {
    hosts => [ "127.0.0.1" ]
    user => "elastic"
    password => "elastic"
    index => "http-log-%{+YYYY.MM.dd}"
    ilm_rollover_alias => "http-log"
    ilm_pattern => "{now/d}-000001"
    ilm_policy => "my_policy"
    manage_template => "false"
  }
}

